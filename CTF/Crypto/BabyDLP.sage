"""
p-1=22874236765582512818346580947708667745188778288884101219751361699392149989458510773797824610944321686257783426829474659298957510513578978620495392070614562
p-1=2*17*2509983517*2544123481*2569813369*2894510363*2958235517*3468154477*4159802197*4166439437*79654994629813981763985900545160276768439280673152129871668427706005929871047
"""
p = 22874236765582512818346580947708667745188778288884101219751361699392149989458510773797824610944321686257783426829474659298957510513578978620495392070614563
c = 4006948706881298103593084841644986324930377713436980291670378524564662999515313693489885343780490631115314181593435331209712709857825836348345723998675361
g = 12992966891086556058043617860106952736598816342586014149483372202900857379441187722193997976148795991526844581149548123484519204440052676174785545786320297
from Crypto.Util.number import *
def reduce_order(g, p, factors, order):
    for fac in factors:
        if pow(g, (p-1) // fac, p) == 1:
            order //= fac
    return order

order = p-1
dlogs=[]
factors,exponents = zip(*factor(order))
factors,exponents = zip(*factor(reduce_order(g, p, factors, order)))
primes = [factors[i] ^ exponents[i] for i in range(len(factors))][:-1]
for base in primes:
    t = order//int(base)
    ci=pow(c,t,p)
    gi=pow(g,t,p)
    dlogs += [discrete_log(ci,gi)]
    
x = crt(dlogs,primes)
print(b'ZJUCTF{' + long_to_bytes(x) + b'}')